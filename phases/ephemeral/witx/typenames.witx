;; Type names used by low-level WASI interfaces.
;;
;; Some content here is derived from [CloudABI](https://github.com/NuxiNL/cloudabi).
;;
;; This is a `witx` file. See [here](https://github.com/WebAssembly/WASI/tree/master/docs/witx.md)
;; for an explanation of what that means.

;;; An array size.
;;;
;;; Note: This is similar to `size_t` in POSIX.
(typename $size (@witx usize))

;;; Timestamp in nanoseconds.
(typename $timestamp u64)

;;; Error codes returned by functions.
;;;
;;; Not all of these error codes are returned by the functions provided by this
;;; API; some are used in higher-level library layers, and others are provided
;;; merely for alignment with POSIX.
;;;
;;; TODO: Introduce enum inheritance and factor out module-specific errno spaces.
(typename $errno
  (enum u16
    ;;; No error occurred. System call completed successfully.
    $success
    ;;; Argument list too long.
    $2big
    ;;; Permission denied.
    $access
    ;;; Address in use.
    $addrinuse
    ;;; Address not available.
    $addrnotavail
    ;;; Address family not supported.
    $afnosupport
    ;;; Resource unavailable, or operation would block.
    $again
    ;;; Connection already in progress.
    $already
    ;;; Bad file descriptor.
    $badf
    ;;; Bad message.
    $badmsg
    ;;; Device or resource busy.
    $busy
    ;;; Operation canceled.
    $canceled
    ;;; No child processes.
    $child
    ;;; Connection aborted.
    $connaborted
    ;;; Connection refused.
    $connrefused
    ;;; Connection reset.
    $connreset
    ;;; Resource deadlock would occur.
    $deadlk
    ;;; Destination address required.
    $destaddrreq
    ;;; Mathematics argument out of domain of function.
    $dom
    ;;; Reserved.
    $dquot
    ;;; File exists.
    $exist
    ;;; Bad address.
    $fault
    ;;; File too large.
    $fbig
    ;;; Host is unreachable.
    $hostunreach
    ;;; Identifier removed.
    $idrm
    ;;; Illegal byte sequence.
    $ilseq
    ;;; Operation in progress.
    $inprogress
    ;;; Interrupted function.
    $intr
    ;;; Invalid argument.
    $inval
    ;;; I/O error.
    $io
    ;;; Socket is connected.
    $isconn
    ;;; Is a directory.
    $isdir
    ;;; Too many levels of symbolic links.
    $loop
    ;;; File descriptor value too large.
    $mfile
    ;;; Too many links.
    $mlink
    ;;; Message too large.
    $msgsize
    ;;; Reserved.
    $multihop
    ;;; Filename too long.
    $nametoolong
    ;;; Network is down.
    $netdown
    ;;; Connection aborted by network.
    $netreset
    ;;; Network unreachable.
    $netunreach
    ;;; Too many files open in system.
    $nfile
    ;;; No buffer space available.
    $nobufs
    ;;; No such device.
    $nodev
    ;;; No such file or directory.
    $noent
    ;;; Executable file format error.
    $noexec
    ;;; No locks available.
    $nolck
    ;;; Reserved.
    $nolink
    ;;; Not enough space.
    $nomem
    ;;; No message of the desired type.
    $nomsg
    ;;; Protocol not available.
    $noprotoopt
    ;;; No space left on device.
    $nospc
    ;;; Function not supported.
    $nosys
    ;;; The socket is not connected.
    $notconn
    ;;; Not a directory or a symbolic link to a directory.
    $notdir
    ;;; Directory not empty.
    $notempty
    ;;; State not recoverable.
    $notrecoverable
    ;;; Not a socket.
    $notsock
    ;;; Not supported, or operation not supported on socket.
    $notsup
    ;;; Inappropriate I/O control operation.
    $notty
    ;;; No such device or address.
    $nxio
    ;;; Value too large to be stored in data type.
    $overflow
    ;;; Previous owner died.
    $ownerdead
    ;;; Operation not permitted.
    $perm
    ;;; Broken pipe.
    $pipe
    ;;; Protocol error.
    $proto
    ;;; Protocol not supported.
    $protonosupport
    ;;; Protocol wrong type for socket.
    $prototype
    ;;; Result too large.
    $range
    ;;; Read-only file system.
    $rofs
    ;;; Invalid seek.
    $spipe
    ;;; No such process.
    $srch
    ;;; Reserved.
    $stale
    ;;; Connection timed out.
    $timedout
    ;;; Text file busy.
    $txtbsy
    ;;; Cross-device link.
    $xdev
    ;;; Extension: Capabilities insufficient.
    $notcapable
  )
)

;;; File descriptor rights, determining which actions may be performed.
;;;
;;; TODO: When files and streams are split, move these into the filesystem module.
(typename $rights
  (flags u64
    ;;; The right to invoke `fd_datasync`.
    ;;
    ;;; If `path_open` is set, includes the right to invoke
    ;;; `path_open` with `fdflags::dsync`.
    $fd_datasync
    ;;; The right to invoke `fd_read` and `sock_recv`.
    ;;
    ;;; If `rights::fd_seek` is set, includes the right to invoke `fd_pread`.
    $fd_read
    ;;; The right to invoke `fd_seek`. This flag implies `rights::fd_tell`.
    $fd_seek
    ;;; The right to invoke `fd_fdstat_set_flags`.
    $fd_fdstat_set_flags
    ;;; The right to invoke `fd_sync`.
    ;;
    ;;; If `path_open` is set, includes the right to invoke
    ;;; `path_open` with `fdflags::rsync` and `fdflags::dsync`.
    $fd_sync
    ;;; The right to invoke `fd_seek` in such a way that the file offset
    ;;; remains unaltered (i.e., `whence::cur` with offset zero), or to
    ;;; invoke `fd_tell`.
    $fd_tell
    ;;; The right to invoke `fd_write` and `sock_send`.
    ;;; If `rights::fd_seek` is set, includes the right to invoke `fd_pwrite`.
    $fd_write
    ;;; The right to invoke `fd_advise`.
    $fd_advise
    ;;; The right to invoke `fd_allocate`.
    $fd_allocate
    ;;; The right to invoke `path_create_directory`.
    $path_create_directory
    ;;; If `path_open` is set, the right to invoke `path_open` with `oflags::create`.
    $path_create_file
    ;;; The right to invoke `path_link` with the file descriptor as the
    ;;; source directory.
    $path_link_source
    ;;; The right to invoke `path_link` with the file descriptor as the
    ;;; target directory.
    $path_link_target
    ;;; The right to invoke `path_open`.
    $path_open
    ;;; The right to invoke `fd_readdir`.
    $fd_readdir
    ;;; The right to invoke `path_readlink`.
    $path_readlink
    ;;; The right to invoke `path_rename` with the file descriptor as the source directory.
    $path_rename_source
    ;;; The right to invoke `path_rename` with the file descriptor as the target directory.
    $path_rename_target
    ;;; The right to invoke `path_filestat_get`.
    $path_filestat_get
    ;;; The right to change a file's size (there is no `path_filestat_set_size`).
    ;;; If `path_open` is set, includes the right to invoke `path_open` with `oflags::trunc`.
    $path_filestat_set_size
    ;;; The right to invoke `path_filestat_set_times`.
    $path_filestat_set_times
    ;;; The right to invoke `path_permissions_set`.
    $path_permissions_set
    ;;; The right to invoke `fd_filestat_get`.
    $fd_filestat_get
    ;;; The right to invoke `fd_filestat_set_size`.
    $fd_filestat_set_size
    ;;; The right to invoke `fd_filestat_set_times`.
    $fd_filestat_set_times
    ;;; The right to invoke `fd_permissions_set`.
    $fd_permissions_set
    ;;; The right to invoke `path_symlink`.
    $path_symlink
    ;;; The right to invoke `path_remove_directory`.
    $path_remove_directory
    ;;; The right to invoke `path_unlink_file`.
    $path_unlink_file
    ;;; If `rights::fd_read` is set, includes the right to invoke `poll_oneoff` to subscribe to `eventtype::fd_read`.
    ;;; If `rights::fd_write` is set, includes the right to invoke `poll_oneoff` to subscribe to `eventtype::fd_write`.
    $poll_fd_readwrite
    ;;; The right to invoke `sock_shutdown`.
    $sock_shutdown
  )
)

;;; A file descriptor handle.
;;;
;;; TODO: Split files and streams and use different handle types.
(typename $fd (handle))
